syntax = "proto3";

option java_multiple_files = true;
option java_package = "de.tum.i13.bandency";
option java_outer_classname = "ChallengerProto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package Challenger;

message Measurement {
  google.protobuf.Timestamp timestamp = 1;
  string symbol = 2;
  float price = 3;
}

message Batch {
  int64 seq_id = 1;
  bool last = 2;
  repeated Measurement trades = 3;
}

message Benchmark {
  int64 id = 1;
}

message ResultQ1 {
  int64 benchmark_id = 1;
  int64 batch_seq_id = 2;
}

message ResultQ2 {
  int64 benchmark_id = 1;
  int64 batch_seq_id = 2;
}

message BenchmarkConfiguration {
  string token = 1; //Token from the webapp for authentication
  int32 batch_size = 2; //Small batches might need different algorithms than large batches
  string benchmark_name = 3; //chosen by the team, listed in the results
  string benchmark_type = 4; //benchmark type, e.g., test

  enum Query {
    Q1 = 0;
    Q2 = 1;
  }
  repeated Query queries = 5;
}

service Challenger {

  //Create a new Benchmark based on the configuration
  rpc createNewBenchmark(BenchmarkConfiguration) returns (Benchmark);

  //This marks the starting point of the throughput measurements
  rpc startBenchmark(Benchmark) returns (google.protobuf.Empty);

  //get the next Batch
  rpc nextBatch(Benchmark) returns (Batch);

  //post the result
  rpc resultQ1(ResultQ1) returns (google.protobuf.Empty);
  rpc resultQ2(ResultQ2) returns (google.protobuf.Empty);

  //This marks the end of the throughput measurements
  rpc endBenchmark(Benchmark) returns (google.protobuf.Empty);
}
