# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import challenger_pb2 as challenger__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ChallengerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLocations = channel.unary_unary(
                '/Challenger.Challenger/GetLocations',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=challenger__pb2.Locations.FromString,
                )
        self.CreateNewBenchmark = channel.unary_unary(
                '/Challenger.Challenger/CreateNewBenchmark',
                request_serializer=challenger__pb2.BenchmarkConfiguration.SerializeToString,
                response_deserializer=challenger__pb2.Benchmark.FromString,
                )
        self.InitializeLatencyMeasuring = channel.unary_unary(
                '/Challenger.Challenger/InitializeLatencyMeasuring',
                request_serializer=challenger__pb2.Benchmark.SerializeToString,
                response_deserializer=challenger__pb2.Ping.FromString,
                )
        self.Measure = channel.unary_unary(
                '/Challenger.Challenger/Measure',
                request_serializer=challenger__pb2.Ping.SerializeToString,
                response_deserializer=challenger__pb2.Ping.FromString,
                )
        self.EndMeasurement = channel.unary_unary(
                '/Challenger.Challenger/EndMeasurement',
                request_serializer=challenger__pb2.Ping.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.StartBenchmark = channel.unary_unary(
                '/Challenger.Challenger/StartBenchmark',
                request_serializer=challenger__pb2.Benchmark.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.nextMessage = channel.unary_unary(
                '/Challenger.Challenger/nextMessage',
                request_serializer=challenger__pb2.Benchmark.SerializeToString,
                response_deserializer=challenger__pb2.Payload.FromString,
                )
        self.processed = channel.unary_unary(
                '/Challenger.Challenger/processed',
                request_serializer=challenger__pb2.Result.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.EndBenchmark = channel.unary_unary(
                '/Challenger.Challenger/EndBenchmark',
                request_serializer=challenger__pb2.Benchmark.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class ChallengerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLocations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateNewBenchmark(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeLatencyMeasuring(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Measure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartBenchmark(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def nextMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def processed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndBenchmark(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChallengerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLocations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLocations,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=challenger__pb2.Locations.SerializeToString,
            ),
            'CreateNewBenchmark': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNewBenchmark,
                    request_deserializer=challenger__pb2.BenchmarkConfiguration.FromString,
                    response_serializer=challenger__pb2.Benchmark.SerializeToString,
            ),
            'InitializeLatencyMeasuring': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeLatencyMeasuring,
                    request_deserializer=challenger__pb2.Benchmark.FromString,
                    response_serializer=challenger__pb2.Ping.SerializeToString,
            ),
            'Measure': grpc.unary_unary_rpc_method_handler(
                    servicer.Measure,
                    request_deserializer=challenger__pb2.Ping.FromString,
                    response_serializer=challenger__pb2.Ping.SerializeToString,
            ),
            'EndMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.EndMeasurement,
                    request_deserializer=challenger__pb2.Ping.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'StartBenchmark': grpc.unary_unary_rpc_method_handler(
                    servicer.StartBenchmark,
                    request_deserializer=challenger__pb2.Benchmark.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'nextMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.nextMessage,
                    request_deserializer=challenger__pb2.Benchmark.FromString,
                    response_serializer=challenger__pb2.Payload.SerializeToString,
            ),
            'processed': grpc.unary_unary_rpc_method_handler(
                    servicer.processed,
                    request_deserializer=challenger__pb2.Result.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'EndBenchmark': grpc.unary_unary_rpc_method_handler(
                    servicer.EndBenchmark,
                    request_deserializer=challenger__pb2.Benchmark.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Challenger.Challenger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Challenger(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLocations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Challenger.Challenger/GetLocations',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            challenger__pb2.Locations.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateNewBenchmark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Challenger.Challenger/CreateNewBenchmark',
            challenger__pb2.BenchmarkConfiguration.SerializeToString,
            challenger__pb2.Benchmark.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitializeLatencyMeasuring(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Challenger.Challenger/InitializeLatencyMeasuring',
            challenger__pb2.Benchmark.SerializeToString,
            challenger__pb2.Ping.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Measure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Challenger.Challenger/Measure',
            challenger__pb2.Ping.SerializeToString,
            challenger__pb2.Ping.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Challenger.Challenger/EndMeasurement',
            challenger__pb2.Ping.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartBenchmark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Challenger.Challenger/StartBenchmark',
            challenger__pb2.Benchmark.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def nextMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Challenger.Challenger/nextMessage',
            challenger__pb2.Benchmark.SerializeToString,
            challenger__pb2.Payload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def processed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Challenger.Challenger/processed',
            challenger__pb2.Result.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndBenchmark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Challenger.Challenger/EndBenchmark',
            challenger__pb2.Benchmark.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
